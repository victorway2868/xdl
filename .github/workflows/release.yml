name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # 触发条件：推送版本标签，如 v1.0.0
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run make
        env:
          CI: true
        
      - name: Get version from tag
        id: version
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(node -p "require('./package.json').version")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Prepare release files
        shell: bash
        run: |
          mkdir -p release-files

          # 根据操作系统和forge配置查找对应的安装包
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows: 查找特定格式的安装包 xiaodouli-Setup-x.x.x.exe
            VERSION="${{ steps.version.outputs.version }}"
            EXPECTED_NAME="xiaodouli-Setup-${VERSION}.exe"

            # 首先尝试查找预期的文件名
            find out/make/squirrel.windows -name "$EXPECTED_NAME" -exec cp {} release-files/ \; 2>/dev/null || true
            find out/make -name "$EXPECTED_NAME" -exec cp {} release-files/ \; 2>/dev/null || true

            # 如果没找到预期文件名，查找任何Setup.exe文件并重命名
            if [[ ! -f "release-files/$EXPECTED_NAME" ]]; then
              FOUND_FILE=$(find out/make -name "*Setup*.exe" | head -1)
              if [[ -n "$FOUND_FILE" ]]; then
                cp "$FOUND_FILE" "release-files/$EXPECTED_NAME"
                echo "Renamed installer from $(basename "$FOUND_FILE") to $EXPECTED_NAME"
              fi
            fi

            INSTALLER_FILE="$(pwd)/release-files/$EXPECTED_NAME"
            if [[ ! -f "$INSTALLER_FILE" ]]; then
              echo "Error: No Windows installer found"
              echo "Expected: $EXPECTED_NAME"
              echo "Available files:"
              find out/make -name "*.exe" -o -name "*Setup*" | head -10
              exit 1
            fi

            echo "installer_file=$INSTALLER_FILE" >> $GITHUB_ENV
            echo "installer_name=$EXPECTED_NAME" >> $GITHUB_ENV
            echo "platform=windows" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # macOS: ZIP文件
            find out/make/zip/darwin -name "*.zip" -exec cp {} release-files/ \; 2>/dev/null || true
            find out/make -name "*.zip" -exec cp {} release-files/ \; 2>/dev/null || true
            INSTALLER_FILE=$(find release-files -name "*.zip" | head -1)
            if [[ -z "$INSTALLER_FILE" ]]; then
              echo "Error: No macOS installer found"
              ls -la out/make/
              exit 1
            fi
            INSTALLER_NAME=$(basename "$INSTALLER_FILE")
            echo "installer_file=$INSTALLER_FILE" >> $GITHUB_ENV
            echo "installer_name=$INSTALLER_NAME" >> $GITHUB_ENV
            echo "platform=macos" >> $GITHUB_ENV
          fi

          echo "Found installer: $INSTALLER_FILE"
          
      - name: Calculate file hash
        shell: bash
        run: |
          if [[ -f "${{ env.installer_file }}" ]]; then
            if command -v sha512sum &> /dev/null; then
              HASH=$(sha512sum "${{ env.installer_file }}" | cut -d' ' -f1)
            else
              HASH=$(shasum -a 512 "${{ env.installer_file }}" | cut -d' ' -f1)
            fi
            echo "file_hash=$HASH" >> $GITHUB_ENV
            echo "File hash: $HASH"
          fi
          
      - name: Upload Artifacts to R2
        env:
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
        run: >
          node scripts/upload-to-r2.mjs
          --installerPath="${{ env.installer_file }}"
          --platform="${{ env.platform }}"
          --version="${{ steps.version.outputs.version }}"
          --sha512="${{ env.file_hash }}"
          --fileName="${{ env.installer_name }}"
          
          echo "Uploaded version metadata for ${{ env.platform }}"
          cat latest-${{ env.platform }}.json
